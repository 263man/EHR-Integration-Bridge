// /workspaces/EHR-Integration-Bridge/EhrBridge.Api/Services/ExportService.cs
using System.Data;
using MySql.Data.MySqlClient;
using EhrBridge.Api.Data;
using EhrBridge.Api.DataGeneration;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace EhrBridge.Api.Services
{
Â  Â  public class ExportService : IExportService
Â  Â  {
Â  Â  Â  Â  private readonly string _connectionString;
Â  Â  Â  Â  private readonly ILogger<ExportService> _logger;

Â  Â  Â  Â  public ExportService(IConfiguration config, ILogger<ExportService> logger)
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  // Use the same configuration retrieval pattern as AuditService
Â  Â  Â  Â  Â  Â  _connectionString = config.GetConnectionString("EhrDatabase")
Â  Â  Â  Â  Â  Â  Â  Â  // Use explicit logic for safety check
Â  Â  Â  Â  Â  Â  Â  Â  ?? (string.IsNullOrEmpty(config.GetConnectionString("EhrDatabase")) == true ? throw new ArgumentNullException(nameof(_connectionString)) : throw new InvalidOperationException("EhrDatabase connection string is null or empty."));
Â  Â  Â  Â  Â  Â  _logger = logger;
Â  Â  Â  Â  }

Â  Â  Â  Â  public async IAsyncEnumerable<CleanPatientRecord> StreamAllPatientRecordsAsync()
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  // WARNING: PHI Exposure Risk mitigated by streaming.
Â  Â  Â  Â  Â  Â  _logger.LogInformation("Streaming all patient records for full export (CleanPatientRecord DTO).");

Â  Â  Â  Â  Â  Â  // SQL to retrieve all fields required for the CleanPatientRecord DTO
Â  Â  Â  Â  Â  Â  // ðŸ›‘ FINAL FIX: Left-align the SQL content to eliminate leading whitespace from the verbatim string.
Â  Â  Â  Â  Â  Â  const string sql = @"SELECT 
pid AS PatientId, 
fname AS FirstName, 
lname AS LastName, 
dob AS DateOfBirth, 
street AS StreetAddress, 
phone_cell AS PhoneNumber, 
postal_code AS PostalCode,
city AS City,
state AS State,
sex AS Gender
FROM patient_data 
WHERE pid > 0;";
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  using var connection = new MySqlConnection(_connectionString);
Â  Â  Â  Â  Â  Â  await connection.OpenAsync();
Â  Â  Â  Â  Â  Â  using var command = new MySqlCommand(sql, connection);
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // CommandBehavior.CloseConnection ensures the connection is closed after the reader finishes/disposes.
Â  Â  Â  Â  Â  Â  using var reader = await command.ExecuteReaderAsync(CommandBehavior.CloseConnection);

Â  Â  Â  Â  Â  Â  while (await reader.ReadAsync())
Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  yield return new CleanPatientRecord
Â  Â  Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  PatientId = reader.GetInt64("PatientId"),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  FirstName = reader.GetString("FirstName"),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  LastName = reader.GetString("LastName"),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  DateOfBirth = reader.IsDBNull("DateOfBirth") == false ? reader.GetDateTime("DateOfBirth").ToString("yyyy-MM-dd") : string.Empty,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  StreetAddress = reader.IsDBNull("StreetAddress") == false ? reader.GetString("StreetAddress") : string.Empty,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  PhoneNumber = reader.IsDBNull("PhoneNumber") == false ? reader.GetString("PhoneNumber") : string.Empty,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  PostalCode = reader.IsDBNull("PostalCode") == false ? reader.GetString("PostalCode") : string.Empty,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  City = reader.IsDBNull("City") == false ? reader.GetString("City") : string.Empty,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  State = reader.IsDBNull("State") == false ? reader.GetString("State") : string.Empty,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Gender = reader.IsDBNull("Gender") == false ? reader.GetString("Gender") : string.Empty,
Â  Â  Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }

Â  Â  Â  Â  public async IAsyncEnumerable<IncompleteRecordDto> StreamIncompleteDemographicRecordsAsync()
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  _logger.LogInformation("Streaming incomplete demographic records for audit export (IncompleteRecordDto).");

Â  Â  Â  Â  Â  Â  // SQL re-uses the core logic of the AuditService (missing street OR missing phone_cell).
Â  Â  Â  Â  Â  Â  // ðŸ›‘ FINAL FIX: Left-align the SQL content to eliminate leading whitespace from the verbatim string.
Â  Â  Â  Â  Â  Â  const string sql = @"SELECT 
pid AS PatientId,
fname AS FirstName, 
lname AS LastName,
street,
phone_cell
FROM patient_data 
WHERE pid > 0 
AND (street IS NULL OR street = '' OR phone_cell IS NULL OR phone_cell = '');";

Â  Â  Â  Â  Â  Â  using var connection = new MySqlConnection(_connectionString);
Â  Â  Â  Â  Â  Â  await connection.OpenAsync();
Â  Â  Â  Â  Â  Â  using var command = new MySqlCommand(sql, connection);

Â  Â  Â  Â  Â  Â  using var reader = await command.ExecuteReaderAsync(CommandBehavior.CloseConnection);

Â  Â  Â  Â  Â  Â  while (await reader.ReadAsync())
Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  // Determine the missing fields to dynamically populate the descriptive fields
Â  Â  Â  Â  Â  Â  Â  Â  var streetMissing = reader.IsDBNull("street") || string.IsNullOrEmpty(reader.GetString("street"));
Â  Â  Â  Â  Â  Â  Â  Â  var phoneMissing = reader.IsDBNull("phone_cell") || string.IsNullOrEmpty(reader.GetString("phone_cell"));
Â  Â  Â  Â  Â  Â  Â  Â  var missingField = (streetMissing && phoneMissing) ? "Address and Phone" : (streetMissing ? "Street Address" : "Phone Number");
Â  Â  Â  Â  Â  Â  Â  Â  var description = $"Missing required field(s): {missingField}.";

Â  Â  Â  Â  Â  Â  Â  Â  yield return new IncompleteRecordDto
Â  Â  Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  PatientId = reader.GetInt32("PatientId"),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  FirstName = reader.GetString("FirstName"),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  LastName = reader.GetString("LastName"),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Field = missingField, 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Description = description,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Reason = "Incomplete demographic record for export."
Â  Â  Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  }
}